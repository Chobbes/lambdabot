%------------------------------------------------------------------------------
% File     : prop_n3 : JProver test formulae (2000)
% Domain   : Syntactic
% Problem  : 
% Version  : Especial.
%            Problem formulation : Intuit. Valid  Size 3
% English  : 

% Refs     : [SN00]  S. Schmitt & A. Nogin: test module "jprover_tests.ml",
%                    test formulas for JProver in MetaPRL, at
%                    http://cvs.metaprl.org:12000/cvsweb/metaprl/theories/
%                         itt/jprover_tests.ml
%            [ES99]  U. Egly & S. Schmitt. On intuitionistic proof
%                    transformations, their complexity, and application to 
%                    constructive program synthesis. In Fundamenta 
%                    Informaticae, Special Issue: Symbolic Computation and 
%                    Artificial Intelligence, vol. 39, 1/2, p. 59-83, 1999
% Source   : [SN00]
% Names    : 

% Status   : Theorem
% Rating   : 0.00 v 1.0
% Syntax   : Number of formulae    :    5 (   1 unit)
%            Number of atoms       :   19 (   0 equality)
%            Maximal formula depth :    5 (   3 average)
%            Number of connectives :   14 (   0 ~  ;   9  |;   3  &)
%                                         (   0 <=>;   2 =>;   0 <=)
%                                         (   0 <~>;   0 ~|;   0 ~&)
%            Number of predicates  :    7 (   7 propositional; 0-0 arity)
%            Number of functors    :    0 (   0 constant; --- arity)
%            Number of variables   :    0 (   0 singleton;   0 !;   0 ?)
%            Maximal term depth    :    0 (   0 average)

% Comments : cause exponential proof length in EVERY LJ proof wrt. the 
%            proof length of a given LJmc proof in propositional 
%            intuitionistic logic 
%          : tptp2X -f ljt sch_prop_n.003.p 
%------------------------------------------------------------------------------

f((

% axiom1, axiom.
(a3)

 & 

% axiom2, axiom.
(( b1 -> ( ( b2 v a2 ) v b2 ) ))

 & 

% axiom3, axiom.
(( b -> ( ( b1 v a1 ) v b1 ) ))

 & 

% axiom4, axiom.
(( ( b v a ) v b ))

  ->

% conjecture_name, conjecture.
(( a v ( ( b & a1 ) v ( ( b1 & a2 ) v ( b2 & a3 ) ) ) ))

)).

%------------------------------------------------------------------------------
