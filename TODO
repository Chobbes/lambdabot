Don's Todo:
* have 'make prof' and 'make static' just work
* reduce memory usage
* Think about some of the issues discussed in Simon Marlow's paper:
        "Writing High-Performance Server Applications in Haskell - 
                Case study: A Haskell Web Server", 2000.

* Profiling issues:
    * ln -s Map.o Map.p_o
    * dynloading won't work, as it requires prof versions of
      HSfoo.o, which don't exist usually. So turn off dyn loading,
      and link everything statically.

Todo:
* FactModule - make "foo?" equal to "lambdabot: @fact foo"
* fsbot-style factoid parsing, 
* real hostmask matching
* refactor utility functions out of the modules ex. gets(\s -> lookupFM ...)
* @fact-to ircnick key for sending factoids via privmsg
* reformat/refill output to allow for fewer longer lines.
* multiple servers
* factor out an IRC library
* update the README
* send alternate nickname?
* automatically filter out blanks lines, ie. in dictionary output

2.0 release list:
* @more needs to check for really really long lines

Wishlist:

* search ghc haddocks by function name and type name and ghc command line option searching ;-)
* search Haskell 98 report
* search citeseer
* search local database of researching paper by keyword (swish++ ?)
* search haskell-wiki
* channel statistics, logs, record of pasted urls
* unit tests, quickcheck tests, written tests... ok, maybe not written
* Some support for bot clients to be able to do their own request/response stuff
* hoogle plugin http://www-users.cs.york.ac.uk/~ndm/hoogle

* add your wishes here ...
