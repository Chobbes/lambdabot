 _                   _          _         _             _
/ \                 / |        | \       / |           | \_
| |    ___ _  _ _ _ | \__    __/ | ___ _ | \__   ____  |  _|
| |   /  _` || ` ` ||  _ \  / _  |/  _` ||  _ \ /  _ \ | |
| \__ | |_| || | | || |_| || |_| || |_| || |_| || |_| || \__
\____|\___,_/|_|_|_|\____/  \____/\___,_/\____/ \____/ \____|

BUILDING:

You'll need GHC >= 6.4

If you're *not* using ghc 6.6, build the Data.ByteString library at
http://www.cse.unsw.edu.au/~dons, version 0.7 and later are ok.

You need the zlib library:
    darcs get http://haskell.org/~duncan/zlib

Build with cabal (simple)
    $ vi Config.hs
    $ ./build
    $ ./lambdabot

If the ./Setup.hs step doesn't seem to like the cabal file, you likely
need to install an updated version of Cabal:
    $ cd $place_you_want_to_put_cabal
    $ darcs get http://darcs.haskell.org/packages/Cabal
    $ cd Cabal
    $ runghc -cpp Setup.lhs configure && runghc -cpp Setup.lhs build
    # runghc -cpp Setup.lhs install

Note: If you want lambdabot to be able to evaluate expressions 
(e.g., "> 1 + 1" evaluates to 2) then you'll need hs-plugins and also 
before './Setup.hs configure --bindir=`pwd`' you need to copy
lambdabot.cabal.plugins to lambdabot.cabal.

Or with ghci (fastest turn around). But first you have to build with
cabal as above anyway. So this is mostly for development purposes.
    $ vi Config.hs
    $ sh configure
    $ sh ghci Main.hs
then
    *Main> main
or
    *Main> online

OFFLINE MODE:
    ./lambdabot

CONNECTING:
    ./lambdabot --online

SSL MODE (with stunnel):

append the following to your stunnel.conf
    client = yes
    [irc]
    accept = 6667
    connect = ssl-irc-server.org:6667

and edit Config.hs to use localhost as server, then restart the stunnel
server, rebuild lambdabot and start it with:

    ./lambdabot --online

SCRIPTS:
    The scripts directory contains some shell scripts for Vim editor support
    They are self-explanatory

BUGS:

Bug reports, patches, new modules etc, contact:

	Don Stewart <dons@cse.unsw.edu.au>
	aka dons on #haskell

REPOSITORY:

Our darcs repository is located at:
    http://www.cse.unsw.edu.au/~dons/lambdabot

CONTRIBUTING:

Use 'darcs send' to submit patches to dons. Add yourself to the AUTHORS
file if you haven't already.
