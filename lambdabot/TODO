Don's Todo:
* partition core and plugins.
* have 'make prof' and 'make static' just work
* reduce memory usage
* reduce size of static core - like Yi, the static core should be a tiny
  dyn loading module (and possibly network module) that loads everything
  else. No 'core' modules should be in the static part.

    + problem with memory usage is that there all dependencies on
    Main are statically linked, and then many are again reloaded
    dynamically. The soln is to use hs-plugins and a static Boot
    module, a la Yi. DynamicModule then becomes a binding to a
    couple of hs-plugins functions. RuntimeLoader and Depends.conf
    disappears. GenModules only is used for way=static. This would be
    much cleaner. Main would be merged into the "core" modules, and
    would simply become the dynamic entry point. It's not one
    afternoon's work, but a couple of days would probably be enough.

    + we then get a @reboot, that reloads all code, but maintains state
    (probably)

* Profiling issues:
    * ln -s Map.o Map.p_o
    * dynloading won't work, as it requires prof versions of
      HSfoo.o, which don't exist usually. So turn off dyn loading,
      and link everything statically.

Thomas' Todo:
* persistence: seen

Todo:
* FactModule - make "foo?" equal to "lambdabot: @fact foo"
* fsbot-style factoid parsing, 
* ircPrivmsg should actually be an input collector of some type, that way output filters could be written
* real hostmask matching
* move privileged commands out of @listcommands
* refactor utility functions out of the modules ex. gets(\s -> lookupFM ...)
* change @more and 'no self privmsg' to output plugins/filters
* @fact-to ircnick key for sending factoids via privmsg
* reformat/refill output to allow for fewer longer lines.
* multiple servers
* factor out an IRC library
* update the README
* send alternate nickname?
* automatically filter out blanks lines, ie. in dictionary output

2.0 release list:
* @more needs to check for really really long lines

Wishlist:

* search ghc haddocks by function name and type name and ghc command line option searching ;-)
* search Haskell 98 report
* search citeseer
* search local database of researching paper by keyword (swish++ ?)
* search haskell-wiki
* channel statistics, logs, record of pasted urls
* unit tests, quickcheck tests, written tests... ok, maybe not written
* Some support for bot clients to be able to do their own request/response stuff

* add your wishes here ...
